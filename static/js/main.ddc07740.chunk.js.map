{"version":3,"sources":["dll/movies.ts","bll/movies-reducer.ts","dll/recomedations.ts","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["a","fetch","response","json","console","error","getMovies","initialState","axios","create","baseURL","App","dispatch","useDispatch","movies","useSelector","state","useEffect","log","then","res","type","alreadyRemoved","charactersState","useState","setCharacters","setLastDirection","childRefs","useMemo","Array","length","fill","map","i","React","createRef","swiped","direction","nameToDelete","id","push","acceptMovieTC","toBeRemoved","title","index","movie","indexOf","current","swipe","className","ref","onSwipe","dir","onCardLeftScreen","filter","character","style","backgroundImage","imageURL","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddc07740.chunk.js","sourcesContent":["async function getMovies() {\r\n    try {\r\n        let response =  await fetch('/movie-tinder/data.json');\r\n        return await  response.json();\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport default getMovies\r\n\r\n\r\n","import {Dispatch} from 'redux'\r\nimport getMovies from \"../dll/movies\";\r\nimport {recomendationsAPI} from \"../dll/recomedations\";\r\n\r\nexport type MovieType = {\r\n    id:       string;\r\n    imageURL: string;\r\n    title:    string;\r\n    summary:  string;\r\n    rating:   number;\r\n}\r\n\r\nconst initialState: Array<MovieType> = []\r\n\r\nexport const moviesReducer = (state: Array<MovieType> = initialState, action: ActionsType): Array<MovieType> => {\r\n    switch (action.type) {\r\n        case 'SET-MOVIES':\r\n            return action.movies.map(movies => ({...movies}))\r\n        case 'ACCEPT-MOVIE':\r\n            return state\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setMoviesAC = (movies: Array<MovieType>) => ({type: 'SET-MOVIES', movies} as const)\r\nexport const acceptMoviesAC = (id: string) => ({type: 'ACCEPT-MOVIE', id} as const)\r\nexport const rejectMoviesAC = (id: string) => ({type: 'REJECT-MOVIE', id} as const)\r\n\r\n// thunks\r\nexport const fetchMoviesTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        getMovies()\r\n            .then((res) => {\r\n                dispatch(setMoviesAC(res))\r\n            })\r\n    }\r\n}\r\n\r\nexport const acceptMovieTC = (id:string) => {\r\n    console.log(\"Movie \" +id+\" was accepted\")\r\n    return (dispatch: ThunkDispatch) => {\r\n        recomendationsAPI.accept(id)\r\n            .then(() => {\r\n                dispatch(acceptMoviesAC(id))\r\n            })\r\n    }\r\n}\r\n\r\nexport const rejectMovieTC = (id:string) => {\r\n    console.log(\"Movie \" +id+\" was rejectedted\")\r\n    return (dispatch: ThunkDispatch) => {\r\n        recomendationsAPI.reject(id)\r\n            .then(() => {\r\n                dispatch(rejectMoviesAC(id))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type SetMoviesActionType = ReturnType<typeof setMoviesAC>;\r\nexport type AcceptMovieActionType = ReturnType<typeof acceptMoviesAC>;\r\nexport type RejectMovieActionType = ReturnType<typeof rejectMoviesAC>;\r\ntype ActionsType = SetMoviesActionType | AcceptMovieActionType | RejectMovieActionType\r\ntype ThunkDispatch = Dispatch<ActionsType>\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL:\r\n        'https://localhost:8080/recommendations/'\r\n});\r\n\r\n\r\nexport const recomendationsAPI = {\r\n    accept(id: string) {\r\n        return instance.put(`/${id}/accept`)},\r\n    reject(id: string) {\r\n        return instance.put(`/${id}/reject`)},\r\n};\r\n","import React, {useEffect, useMemo, useState} from 'react';\nimport './App.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {acceptMovieTC, fetchMoviesTC, MovieType, rejectMovieTC} from \"./bll/movies-reducer\";\nimport {AppRootStateType} from \"./bll/store\";\nimport TinderCard from 'react-tinder-card'\n\n// type SwipeDirectionType = {\n//     dir: string\n// }\n\n\nfunction App() {\n  const dispatch = useDispatch();\n  const movies = useSelector<AppRootStateType, Array<MovieType>>(state => state.movies)\n\n\n  useEffect(() => {\n    console.log(\"dsf\")\n    dispatch(fetchMoviesTC());\n  }, [dispatch])\n\n    // @ts-ignore\n    const alreadyRemoved = [] as Array[]\n    let charactersState = movies\n\n    const [characters, setCharacters] = useState(movies)\n    const [lastDirection, setLastDirection] = useState()\n\n    const childRefs = useMemo(() => Array(movies.length).fill(0).map(i => React.createRef()), [])\n\n    const swiped = (direction:any, nameToDelete:string) => {\n        console.log('removing: ' + nameToDelete)\n        setLastDirection(direction)\n        alreadyRemoved.push(nameToDelete)\n        {direction === \"right\"? rejectMovieTC(nameToDelete): acceptMovieTC(nameToDelete)}\n        const toBeRemoved = charactersState[charactersState.length - 1].title // Find the card object to be removed\n        const index = movies.map(movie => movie.title).indexOf(toBeRemoved) // Find the index of which to make the reference to\n        alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\n        debugger\n// @ts-ignore\n        childRefs[index].current.swipe(direction)\n    }\n\n    const outOfFrame = (title: string) => {\n        console.log(title + ' left the screen!')\n        charactersState = charactersState.filter(character => character.title !== title)\n        debugger\n        setCharacters(charactersState)\n\n    }\n\n//     const swipe = (dir:string) => {\n//       debugger\n//\n//         const cardsLeft = characters.filter(movie => !alreadyRemoved.includes(movie.title))\n//         if (cardsLeft.length) {\n//             const toBeRemoved = cardsLeft[cardsLeft.length - 1].title // Find the card object to be removed\n//             const index = movies.map(movie => movie.title).indexOf(toBeRemoved) // Find the index of which to make the reference to\n//             alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\n//             debugger\n// // @ts-ignore\n//             childRefs[index].current.swipe(dir) // Swipe the card!\n//         }\n//     }\n\n\n\n\n    return (\n    <div className=\"App\">\n      <h1>Movie Tinder</h1>\n      <div className='cardContainer'>\n        {charactersState.map((movie, index) =>\n// @ts-ignore\n            <TinderCard  ref={childRefs[index] as React.RefObject<HTMLDivElement>} className='swipe' key={movie.id} onSwipe={(dir) => swiped(dir, movie.title)} onCardLeftScreen={() => outOfFrame(movie.title)}>\n                <div>\n\n                </div>\n\n                <div style={{ backgroundImage: 'url(' + movie.imageURL + ')' }} className='card'>\n\n              </div>\n                <div className='buttons'>\n                    <button className='button-reject' onClick={() => swiped('left', movie.title)}>Reject</button>\n                    <button className='button-accept' onClick={() => swiped('right', movie.title)}>Accept</button>\n                </div>\n            </TinderCard>\n\n        )}\n      </div>\n\n      <h2 className='infoText'>Swipe a card to the left to reject and right to accept!</h2>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {moviesReducer} from \"./movies-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    movies: moviesReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./bll/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}