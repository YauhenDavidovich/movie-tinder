{"version":3,"sources":["dll/movies.ts","bll/movies-reducer.ts","dll/recomedations.ts","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["a","fetch","response","json","console","error","getMovies","initialState","axios","create","baseURL","App","alreadyRemoved","dispatch","useDispatch","moviesData","useSelector","state","movies","childRefs","useMemo","Array","length","fill","map","i","React","createRef","useState","setMovies","moviesState","useEffect","then","res","type","swiped","direction","id","push","outOfFrame","log","rejectMovieTC","filter","movie","swipe","dir","cardsLeft","includes","toBeRemoved","index","indexOf","current","className","ref","onSwipe","onCardLeftScreen","style","backgroundImage","imageURL","title","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.543f32e0.chunk.js","sourcesContent":["async function getMovies() {\r\n    try {\r\n        let response =  await fetch('/movie-tinder/data.json');\r\n        return await  response.json();\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport default getMovies\r\n\r\n\r\n","import {Dispatch} from 'redux'\r\nimport getMovies from \"../dll/movies\";\r\nimport {recomendationsAPI} from \"../dll/recomedations\";\r\n\r\nexport type MovieType = {\r\n    id:       string;\r\n    imageURL: string;\r\n    title:    string;\r\n    summary:  string;\r\n    rating:   number;\r\n}\r\n\r\nconst initialState: Array<MovieType> = []\r\n\r\nexport const moviesReducer = (state: Array<MovieType> = initialState, action: ActionsType): Array<MovieType> => {\r\n    switch (action.type) {\r\n        case 'SET-MOVIES':\r\n            return action.movies.map(movies => ({...movies}))\r\n        case 'ACCEPT-MOVIE':\r\n            return state\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setMoviesAC = (movies: Array<MovieType>) => ({type: 'SET-MOVIES', movies} as const)\r\nexport const acceptMoviesAC = (id: string) => ({type: 'ACCEPT-MOVIE', id} as const)\r\nexport const rejectMoviesAC = (id: string) => ({type: 'REJECT-MOVIE', id} as const)\r\n\r\n// thunks\r\nexport const fetchMoviesTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        getMovies()\r\n            .then((res) => {\r\n                dispatch(setMoviesAC(res))\r\n            })\r\n    }\r\n}\r\n\r\nexport const acceptMovieTC = (id:string) => {\r\n    console.log(\"Movie \" +id+\" was accepted\")\r\n    return (dispatch: ThunkDispatch) => {\r\n        recomendationsAPI.accept(id)\r\n            .then(() => {\r\n                dispatch(acceptMoviesAC(id))\r\n            })\r\n    }\r\n}\r\n\r\nexport const rejectMovieTC = (id:string) => {\r\n    console.log(\"Movie \" +id+\" was rejectedted\")\r\n    return (dispatch: ThunkDispatch) => {\r\n        recomendationsAPI.reject(id)\r\n            .then(() => {\r\n                dispatch(rejectMoviesAC(id))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type SetMoviesActionType = ReturnType<typeof setMoviesAC>;\r\nexport type AcceptMovieActionType = ReturnType<typeof acceptMoviesAC>;\r\nexport type RejectMovieActionType = ReturnType<typeof rejectMoviesAC>;\r\ntype ActionsType = SetMoviesActionType | AcceptMovieActionType | RejectMovieActionType\r\ntype ThunkDispatch = Dispatch<ActionsType>\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL:\r\n        'https://localhost:8080/recommendations/'\r\n});\r\n\r\n\r\nexport const recomendationsAPI = {\r\n    accept(id: string) {\r\n        return instance.put(`/${id}/accept`)},\r\n    reject(id: string) {\r\n        return instance.put(`/${id}/reject`)},\r\n};\r\n","import React, {useEffect, useMemo, useState} from 'react';\nimport './App.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {acceptMovieTC, fetchMoviesTC, MovieType, rejectMovieTC} from \"./bll/movies-reducer\";\nimport {AppRootStateType} from \"./bll/store\";\nimport TinderCard from 'react-tinder-card'\n\n\n\nfunction App() {\n    const alreadyRemoved = [] as Array<string>\n    const dispatch = useDispatch();\n    const moviesData = useSelector<AppRootStateType, Array<MovieType>>(state => state.movies)\n    const childRefs = useMemo(() => Array(moviesData.length).fill(0).map(i => React.createRef<any>()), [moviesData])\n    const [movies, setMovies] = useState(moviesData)\n    let moviesState = moviesData\n\n    useEffect(() => {\n        dispatch(fetchMoviesTC());\n    }, [dispatch])\n\n    useEffect(() => {\n        setMovies(moviesData);\n    }, [moviesData])\n\n\n\n\n    const swiped = (direction: any, id: string) => {\n        alreadyRemoved.push(id)\n        outOfFrame(id)\n        {\n            direction === \"right\" || \"left\" ? rejectMovieTC(id) : acceptMovieTC(id)\n        }\n    }\n    const outOfFrame = (id:string) => {\n        moviesState = moviesState.filter(movie => movie.id !== id)\n        setMovies(moviesState)\n        console.log(moviesState)\n    }\n    const swipe = (dir: string) => {\n        const cardsLeft = movies.filter(movie => !alreadyRemoved.includes(movie.id))\n        if (cardsLeft.length) {\n            const toBeRemoved = cardsLeft[cardsLeft.length - 1].id\n            const index = moviesData.map(movie => movie.id).indexOf(toBeRemoved)\n            alreadyRemoved.push(toBeRemoved)\n            debugger\n            childRefs[index]?.current?.swipe(dir)\n        }\n    }\n\n\n    return (\n        <div className=\"App\">\n            <h1>Movie Tinder</h1>\n            <div className='cardContainer'>\n                {moviesState.map((movie, index) =>\n                        <TinderCard ref={childRefs[index]} className='swipe'\n                                    key={movie.id} onSwipe={(dir) => swiped(dir, movie.id)} onCardLeftScreen={() => outOfFrame(movie.id)}>\n                            <div style={{backgroundImage: 'url(' + movie.imageURL + ')'}} className='card'>\n                                <h3>{movie.title}</h3>\n                            </div>\n\n                        </TinderCard>\n                )}\n            </div>\n            <div className='buttons' >\n                <button className='button-reject' onClick={() => swipe('left')}>Reject</button>\n                <button className='button-accept' onClick={() => swipe('right')}>Accept</button>\n            </div>\n\n            <h2 className='infoText'>Swipe a card to the left to reject and right to accept!</h2>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {moviesReducer} from \"./movies-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    movies: moviesReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./bll/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}