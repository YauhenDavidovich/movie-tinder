{"version":3,"sources":["dll/movies.ts","bll/movies-reducer.ts","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["a","fetch","response","json","console","error","getMovies","initialState","App","dispatch","useDispatch","movies","useSelector","state","useEffect","log","then","res","type","alreadyRemoved","charactersState","useState","characters","setCharacters","lastDirection","setLastDirection","childRefs","useMemo","Array","length","fill","map","i","React","createRef","swipe","dir","cardsLeft","filter","movie","includes","title","toBeRemoved","index","indexOf","push","current","className","ref","onSwipe","direction","nameToDelete","onCardLeftScreen","character","style","backgroundImage","imageURL","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68136e77.chunk.js","sourcesContent":["async function getMovies() {\r\n    try {\r\n        let response =  await fetch('/movie-tinder/data.json');\r\n        return await  response.json();\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nexport default getMovies\r\n","import {Dispatch} from 'redux'\r\nimport getMovies from \"../dll/movies\";\r\n\r\nexport type MovieType = {\r\n    id:       string;\r\n    imageURL: string;\r\n    title:    string;\r\n    summary:  string;\r\n    rating:   number;\r\n}\r\n\r\nconst initialState: Array<MovieType> = []\r\n\r\nexport const moviesReducer = (state: Array<MovieType> = initialState, action: ActionsType): Array<MovieType> => {\r\n    switch (action.type) {\r\n        case 'SET-MOVIES':\r\n            return action.movies.map(movies => ({...movies}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setMoviesAC = (movies: Array<MovieType>) => ({type: 'SET-MOVIES', movies} as const)\r\n\r\n// thunks\r\nexport const fetchMoviesTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        getMovies()\r\n            .then((res) => {\r\n                dispatch(setMoviesAC(res))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type SetMoviesActionType = ReturnType<typeof setMoviesAC>;\r\ntype ActionsType = SetMoviesActionType\r\ntype ThunkDispatch = Dispatch<ActionsType>\r\n","import React, {useEffect, useMemo, useState} from 'react';\nimport './App.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchMoviesTC, MovieType} from \"./bll/movies-reducer\";\nimport {AppRootStateType} from \"./bll/store\";\nimport TinderCard from 'react-tinder-card'\n\n\n\nfunction App() {\n  const dispatch = useDispatch();\n  const movies = useSelector<AppRootStateType, Array<MovieType>>(state => state.movies)\n\n\n  useEffect(() => {\n    console.log(\"dsf\")\n    dispatch(fetchMoviesTC());\n  }, [dispatch])\n\n    // @ts-ignore\n    const alreadyRemoved = []\n    let charactersState = movies\n\n    const [characters, setCharacters] = useState(movies)\n    const [lastDirection, setLastDirection] = useState()\n\n    const childRefs = useMemo(() => Array(movies.length).fill(0).map(i => React.createRef()), [movies.length])\n\n    const swiped = (direction:any, nameToDelete:string) => {\n        console.log('removing: ' + nameToDelete)\n        setLastDirection(direction)\n        // @ts-ignore\n        alreadyRemoved.push(nameToDelete)\n    }\n\n    const outOfFrame = (title: string) => {\n        console.log(title + ' left the screen!')\n        charactersState = charactersState.filter(character => character.title !== title)\n        setCharacters(charactersState)\n    }\n\n    const swipe = (dir:any) => {\n        // @ts-ignore\n        const cardsLeft = characters.filter(movie => !alreadyRemoved.includes(movie.title))\n        if (cardsLeft.length) {\n            const toBeRemoved = cardsLeft[cardsLeft.length - 1].title // Find the card object to be removed\n            const index = movies.map(movie => movie.title).indexOf(toBeRemoved) // Find the index of which to make the reference to\n            // @ts-ignore\n            alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\n            // @ts-ignore\n            childRefs[index].current.swipe(dir) // Swipe the card!\n        }\n    }\n\n  // @ts-ignore\ndebugger\n    return (\n    <div className=\"App\">\n      <h1>Movie Tinder</h1>\n      <div className='cardContainer'>\n        {movies.map((movie, index) =>\n            // @ts-ignore\n            <TinderCard  ref={childRefs[index]} className='swipe' key={movie.title} onSwipe={(dir) => swiped(dir, movie.title)} onCardLeftScreen={() => outOfFrame(movie.title)}>\n              <div style={{ backgroundImage: 'url(' + movie.imageURL + ')' }} className='card'>\n                <h3>{movie.title}</h3>\n              </div>\n            </TinderCard>\n        )}\n      </div>\n      <div className='buttons'>\n        <button className='button-reject' onClick={() => swipe('reject')}>Reject</button>\n        <button className='button-accept' onClick={() => swipe('accept')}>Accept</button>\n      </div>\n      {lastDirection ? <h2 key={lastDirection} className='infoText'>Film was {lastDirection}</h2> : <h2 className='infoText'>Swipe a card or press a button to get started!</h2>}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {moviesReducer} from \"./movies-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    movies: moviesReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./bll/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}